{"meta":{"title":"private plots of P&W","subtitle":null,"description":null,"author":"blackj liuyun","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-09-22T17:42:49.000Z","updated":"2018-09-22T17:48:51.109Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-22T18:05:33.000Z","updated":"2018-09-22T18:05:33.534Z","comments":true,"path":"tags/index-1.html","permalink":"http://yoursite.com/tags/index-1.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-22T18:03:46.000Z","updated":"2018-11-21T04:22:58.560Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"title: 区块链安全date: 2018-09-23 02:03:46 type: “tags”"}],"posts":[{"title":"","slug":"BCH分叉","date":"2018-11-21T04:25:51.855Z","updated":"2018-11-21T04:25:51.850Z","comments":true,"path":"2018/11/21/BCH分叉/","link":"","permalink":"http://yoursite.com/2018/11/21/BCH分叉/","excerpt":"","text":"title: BCH分叉-重放攻击解决方案 date: 2018-11-21 00:08:30 tags: 区块链安全BCH分叉 重放攻击解决方案BCH在进行硬分叉：分为BCH和BCHSV 对于分叉前拥有BCH的用户，在分叉后该钱包中会拥有BCH/BSV两种虚拟货币，若是分叉前钱包里有BCH，在硬分叉完成后，这个钱包里也会生成相应的BSV 目的：分离同一地址中 共同存在的BCH和BSV 来防重放攻击针对转账业务限制条件：该用户账户拥有BCH的同时也拥有BSV利用原理：在用户原意在分叉后转帐 BCH 时，该消息被攻击者广播在BSV链上，导致用户的BSV资产也被转移，受到重放攻击。 INPUT污染法分离：INPUT污染法的原理：就是用分叉后的BCH混入分叉前的BCH，从而达到分离BCH与BSV的目的。具体操作如下： 在分叉完成后，用分叉后的BCH币充值到分叉前的BCH币所在的钱包，然后将这个钱包里所有的BCH币（分叉前的BCH和分叉后的BCH）转移到另一个地址。此次交易在BCH链可以成功完成，但是在BSV链上广播时却不能被节点接受，因为这笔交易离存在着分叉后的BCH币。这样子，BSV还是存在于原本的钱包中，达到了将BCH和BSV分离的目的。 构造特有的操作码交易：分叉后的BCH和BSV链的共识机制有一定的区别，主要体现在操作码上， BCH链上交易时，构造含有 OP_CHECKDATASIG 操作码的输出 BCHSV链上交易时，构造含有 OP_MUL 操作码的输出","categories":[],"tags":[]},{"title":"","slug":"1119 msf下 windows内核提权方法","date":"2018-11-20T18:04:03.867Z","updated":"2018-11-20T18:04:03.867Z","comments":true,"path":"2018/11/21/1119 msf下 windows内核提权方法/","link":"","permalink":"http://yoursite.com/2018/11/21/1119 msf下 windows内核提权方法/","excerpt":"","text":"msf下 windows内核提权方法简介：在渗透测试中，当目标机器是windows系统时，在反弹shell后，会涉及到上传mimikatz抓取用户密码，以便在域环境中更好的获取用户信息及渗透，此时就涉及到权限不够，需要通过各类exp来进行本地提权，来将用户权限提取为system权限。首先来看看在msf下进行提权的方法 msf自带exp提权模块local exploit suggester这个模块可以帮助识别系统存在的可被利用的漏洞，并根据架构、平台、会话类型、和默认选项来提供合适的exp进行提权，而不用去手动搜索。 应用实例 前提条件：已获取反弹回的meterpreter会话，但是为低权限用户 演示 1、通过前文所述的采用shellcode执行器和执行代码分离绕过杀软，并执行，返回shell，建立meterpreter会话。 [] 提权模块实战之 exploit/windows/local/bypassuac_eventvwr项uac绕过模块 bypassuac_eventvwr 简介：通过注册表eventvwr绕过UAC UAC：用户账户控制,vista及以上版本操作系统采用的控制机制，目的是为了阻止不必要的系统范围更改，确保仅以管理员及system用户进行更改，在程序涉及到系统更改或涉及特定的动作即会要求以管理员身份执行，否则将会阻止 目的：获取用户system权限正常情况下获取的meterpreter会话中权限为登陆用户的权限 在使用该模块后提权后，再通过msf内置的getsystem，可将用户权限提升为system权限使用前 使用后：会话成功提权为system，可进一步进行mimikatz抓取 成功抓取 RottenPotato /Juicy Potato 提权##","categories":[],"tags":[]},{"title":"","slug":"第一章 代码审计前的准备","date":"2018-11-20T17:55:11.384Z","updated":"2018-11-20T17:55:11.384Z","comments":true,"path":"2018/11/21/第一章 代码审计前的准备/","link":"","permalink":"http://yoursite.com/2018/11/21/第一章 代码审计前的准备/","excerpt":"","text":"1.3 php核心配置的详解代码在不同的环境配置下 执行会有很大的不同，导致我们在代码审计前要非常熟悉各个版本中核心配置的各个指令，才能高效的挖掘漏洞。 PHP__INI__* 常量的定义书中只列出会影响PHP脚本安全的配置列表以及核心配置的选项。 1 . register_globals 全局变量注册开关： 该选项在设置为on的时候，会把用户GET、POST等方式提交上来的参数注册成全局变量并初始化值为参数对应的值，使得提交上来的参数可以在脚本中直接使用影响版本 php 4.2.3-php5.4.0 使用案例：1234&lt;?phpif($user==&apos;admin&apos;)&#123; echo &apos;true&apos;;&#125;?&gt; 此时在register_globals 为on 如果输入为1php?user=admin 则输出结果为 true 2 . allow_url_include 是否允许包含远程文件这个配置指令为on的情况下，可以直接包含远程文件，当存在include($var)且$var可控的情况下，可以直接控制$var变量来执行$var来执行php代码。 使用案例：123&lt;?phpinclude $_GET['a'];?&gt; 利用为1php?a=http://localhost/test/test.txt 任意读取权限内的文件 在php5.2.0后,默认配置设置是off类似的配置allow_url_fopen 是否允许打开远程文件","categories":[],"tags":[]},{"title":"“hexo_start”","slug":"“hexo-start”","date":"2018-07-22T18:11:33.000Z","updated":"2018-07-22T18:11:33.373Z","comments":true,"path":"2018/07/23/“hexo-start”/","link":"","permalink":"http://yoursite.com/2018/07/23/“hexo-start”/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-07-22T09:00:41.812Z","updated":"2018-07-22T09:00:41.812Z","comments":true,"path":"2018/07/22/hello-world/","link":"","permalink":"http://yoursite.com/2018/07/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}